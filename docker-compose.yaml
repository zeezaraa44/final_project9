version: '3'
x-airflow-common:
  &airflow-common
  image: apache/airflow:2.8.4-python3.10
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    - AIRFLOW__CORE__FERNET_KEY=FB0o_zt4e3Ziq3LdUUO7F2Z95cvFFx16hU8jTeR1ASM=
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__LOGGING__LOGGING_LEVEL=INFO
  user: "${AIRFLOW_UID:-50000}:0"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./source:/opt/airflow/source
    - ./output:/opt/airflow/output
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./requirements.txt:/requirements.txt

services:
  postgres:
    image: postgres:12
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
      - POSTGRES_PORT=5432
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    ports:
      - "5432:5432"

  airflow-init:
    << : *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - airflow db init &&
        airflow users create
          --role Admin
          --username airflow
          --password airflow
          --email airflow@airflow.com
          --firstname airflow
          --lastname airflow
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  airflow-webserver:
    << : *airflow-common
    command: >
      bash -c "python3 -m pip install --upgrade pip &&
      pip install --no-cache-dir -r /requirements.txt &&
      airflow webserver"
    ports:
      - 8080:8080
    container_name: airflow_webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

  airflow-scheduler:
    << : *airflow-common
    command: >
      bash -c "python3 -m pip install --upgrade pip &&
      pip install --no-cache-dir -r /requirements.txt &&
      airflow scheduler"
    container_name: airflow_scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

volumes:
  postgres-db-volume: